diff --git a/include/boost/geometry/algorithms/detail/overlay/traverse.hpp b/include/boost/geometry/algorithms/detail/overlay/traverse.hpp
index a8f4232..05a2656 100644
--- a/include/boost/geometry/algorithms/detail/overlay/traverse.hpp
+++ b/include/boost/geometry/algorithms/detail/overlay/traverse.hpp
@@ -42,17 +42,17 @@ namespace detail { namespace overlay
 template <typename Turn, typename Operation>
 #ifdef BOOST_GEOMETRY_DEBUG_TRAVERSE
 inline void debug_traverse(Turn const& turn, Operation op,
-                std::string const& header)
+                           char const*  header)
 {
-    std::cout << header
-        << " at " << op.seg_id
-        << " meth: " << method_char(turn.method)
-        << " op: " << operation_char(op.operation)
-        << " vis: " << visited_char(op.visited)
-        << " of:  " << operation_char(turn.operations[0].operation)
-        << operation_char(turn.operations[1].operation)
-        << " " << geometry::wkt(turn.point)
-        << std::endl;
+    std::cout << std::string(header)
+        //<< " at " << op.seg_id
+              << " meth: " << method_char(turn.method)
+              << " op: " << operation_char(op.operation)
+              << " vis: " << visited_char(op.visited)
+              << " of:  " << operation_char(turn.operations[0].operation)
+              << operation_char(turn.operations[1].operation)
+              << " " << geometry::wkt(turn.point)
+              << std::endl;
 
     if (boost::contains(header, "Finished"))
     {
@@ -719,6 +719,7 @@ struct traversal
         }
         else
         {
+#if 1
             Backtrack::apply(
                 finalized_ring_size,
                 rings, ring, m_turns, start_turn,
@@ -726,6 +727,14 @@ struct traversal
                 traverse_error,
                 m_geometry1, m_geometry2, m_robust_policy,
                 state, m_visitor);
+#else
+            Backtrack::apply(
+                finalized_ring_size,
+                rings, ring,
+                m_turns, m_turns[turn_index].operations[op_index],
+                m_geometry1, m_geometry2, m_robust_policy,
+                state);
+#endif
         }
     }
 
diff --git a/include/boost/geometry/extensions/algorithms/dissolve.hpp b/include/boost/geometry/extensions/algorithms/dissolve.hpp
index 451298c..f7b789c 100644
--- a/include/boost/geometry/extensions/algorithms/dissolve.hpp
+++ b/include/boost/geometry/extensions/algorithms/dissolve.hpp
@@ -18,6 +18,7 @@
 #include <boost/geometry/algorithms/detail/overlay/get_turns.hpp>
 #include <boost/geometry/algorithms/detail/overlay/self_turn_points.hpp>
 
+#include <boost/geometry/algorithms/detail/overlay/overlay.hpp>
 #include <boost/geometry/algorithms/detail/overlay/turn_info.hpp>
 #include <boost/geometry/algorithms/detail/overlay/enrichment_info.hpp>
 #include <boost/geometry/algorithms/detail/overlay/traversal_info.hpp>
@@ -58,23 +59,40 @@ struct no_interrupt_policy
     }
 };
 
-
-template<typename Geometry>
+/*
+Backtrack::apply(
+                finalized_ring_size,
+                rings, ring, m_turns, start_turn,
+                m_turns[turn_index].operations[op_index],
+                traverse_error,
+                m_geometry1, m_geometry2, m_robust_policy,
+                state, m_visitor);
+*/
+
+//template<typename Geometry>
 class backtrack_for_dissolve
 {
 public :
     typedef detail::overlay::backtrack_state state_type;
 
-    template <typename Operation, typename Rings, typename Turns, typename RescalePolicy>
+    template <typename Operation,
+              typename Rings,
+              typename Turns,
+              typename Geometry,
+              typename RescalePolicy,
+              typename Visitor>
     static inline void apply(std::size_t size_at_start,
-                Rings& rings, typename boost::range_value<Rings>::type& ring,
-                Turns& turns, Operation& operation,
-                std::string const& ,
-                Geometry const& ,
-                Geometry const& ,
-                RescalePolicy const& ,
-                state_type& state
-                )
+                             Rings& rings,
+                             typename boost::range_value<Rings>::type& ring,
+                             Turns& turns,
+                             typename boost::range_value<Turns>::type const&, // turn
+                             Operation& operation,
+                             detail::overlay::traverse_error_type, //traverse_error
+                             Geometry const& ,
+                             Geometry const& ,
+                             RescalePolicy const& ,
+                             state_type& state,
+                             Visitor& )
     {
         state.m_good = false;
 
@@ -108,6 +126,13 @@ struct dissolve_ring_or_polygon
                 typename segment_ratio_type<point_type, RescalePolicy>::type
             > turn_info;
 
+        typedef std::map
+        <
+            signed_size_type,
+            std::set<signed_size_type>
+        > cluster_type;
+
+        cluster_type clusters;
         std::vector<turn_info> turns;
         detail::dissolve::no_interrupt_policy policy;
         geometry::self_turns
@@ -129,37 +154,51 @@ struct dissolve_ring_or_polygon
                 typename cs_tag<Geometry>::type
             >::type side_strategy_type;
 
-            enrich_intersection_points<false, false, overlay_dissolve>(turns,
-                        detail::overlay::operation_union,
-                        geometry, geometry, rescale_policy,
-                        side_strategy_type());
+            enrich_intersection_points<false, false, overlay_dissolve>
+                (turns,
+                 clusters,
+                 detail::overlay::operation_union,
+                 geometry,
+                 geometry,
+                 rescale_policy,
+                 side_strategy_type());
 
             typedef detail::overlay::traverse
                 <
                     false, false,
                     Geometry, Geometry,
-                    backtrack_for_dissolve<Geometry>
-                > traverser;
-
+                    detail::overlay::operation_union,
+                    backtrack_for_dissolve
+                > traverser_union;
 
             // Traverse the polygons twice for union...
-            traverser::apply(geometry, geometry,
-                            detail::overlay::operation_union,
-                            rescale_policy,
-                            turns, rings);
+            detail::overlay::overlay_null_visitor null_visitor;
+            traverser_union::apply(geometry, geometry,
+                                   rescale_policy,
+                                   turns, rings, clusters, null_visitor);
 
             clear_visit_info(turns);
 
-            enrich_intersection_points<false, false, bg::overlay_dissolve>(turns,
-                        detail::overlay::operation_intersection,
-                        geometry, geometry, rescale_policy,
-                        side_strategy_type());
+            enrich_intersection_points<false, false, overlay_dissolve>
+                (turns,
+                 clusters,
+                 detail::overlay::operation_intersection,
+                 geometry, geometry, rescale_policy,
+                 side_strategy_type());
+
+            typedef detail::overlay::traverse
+                <
+                    false, false,
+                    Geometry, Geometry,
+                    detail::overlay::operation_intersection,
+                    backtrack_for_dissolve
+                > traverser_intersection;
+
 
             // ... and for intersection
-            traverser::apply(geometry, geometry,
-                            detail::overlay::operation_intersection,
-                            rescale_policy,
-                            turns, rings);
+            traverser_intersection::apply(geometry, geometry,
+                                          rescale_policy,
+                                          turns, rings, clusters, null_visitor);
 
             std::map<ring_identifier, detail::overlay::ring_turn_info> map;
             get_ring_turn_info(map, turns);
@@ -291,13 +330,18 @@ inline void dissolve(Geometry const& geometry, Collection& output_collection)
 
     concept::check<geometry_out>();
 
+    using point_type =  typename geometry::point_type<Geometry>::type;
+    using rescale_policy_type = typename geometry::rescale_policy_type<point_type>::type;
+
+    rescale_policy_type robust_policy = geometry::get_rescale_policy<rescale_policy_type>(geometry);
+
     dispatch::dissolve
     <
-        typename tag<Geometry>::type,
-        typename tag<geometry_out>::type,
-        Geometry,
-        geometry_out
-    >::apply(geometry, detail::no_rescale_policy(), std::back_inserter(output_collection));
+    typename tag<Geometry>::type,
+    typename tag<geometry_out>::type,
+    Geometry,
+    geometry_out
+    >::apply(geometry, robust_policy/*detail::no_rescale_policy()*/, std::back_inserter(output_collection));
 }
 
 
